const express = require('express');
const http = require('http');
const socketIo = require('socket.io');
const cors = require('cors');
const path = require('path');

const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});

const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(express.static(path.join(__dirname, 'public')));
app.use(express.json({ limit: '10mb' })); // ูุฏุนู ุงููููุงุช

// ุชุฎุฒูู ุงูุจูุงูุงุช ูู ุงูุฐุงูุฑุฉ (ููุชุฌุฑุจุฉ)
let messages = [];
let users = new Map();
let rooms = new Map();

// ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API ููุญุตูู ุนูู ุงูุฑุณุงุฆู
app.get('/api/messages/:room', (req, res) => {
  const roomMessages = messages.filter(msg => msg.room === req.params.room);
  res.json(roomMessages.slice(-50)); // ุขุฎุฑ 50 ุฑุณุงูุฉ
});

// Socket.IO Connection
io.on('connection', (socket) => {
  console.log('๐ ูุณุชุฎุฏู ุฌุฏูุฏ ูุชุตู:', socket.id);
  
  // ุงูุถูุงู ููุบุฑูุฉ
  socket.on('join-room', (data) => {
    const { room = 'main', userName = 'ูุฌููู' } = data;
    
    socket.join(room);
    users.set(socket.id, { 
      room, 
      userName, 
      typing: false,
      joinedAt: Date.now() 
    });
    
    // ุฅุญุตุงุฆูุงุช ุงูุบุฑูุฉ
    const roomUsers = Array.from(users.values()).filter(u => u.room === room);
    io.to(room).emit('users-count', roomUsers.length);
    
    // ุฅุฑุณุงู ุงูุฑุณุงุฆู ุงูุณุงุจูุฉ
    const roomMessages = messages
      .filter(msg => msg.room === room)
      .slice(-50);
    socket.emit('previous-messages', roomMessages);
    
    // ุฅุดุนุงุฑ ุจุงูุงูุถูุงู
    socket.broadcast.to(room).emit('user-joined', {
      userName,
      message: `${userName} ุงูุถู ูููุญุงุฏุซุฉ`,
      timestamp: Date.now()
    });
    
    console.log(`๐ ${userName} ุงูุถู ููุบุฑูุฉ: ${room}`);
  });

  // ุงุณุชูุงู ุฑุณุงูุฉ ุฌุฏูุฏุฉ
  socket.on('send-message', (message) => {
    const user = users.get(socket.id);
    if (!user) return;
    
    const fullMessage = {
      ...message,
      room: user.room,
      id: Date.now() + Math.random(),
      timestamp: Date.now()
    };
    
    messages.push(fullMessage);
    
    // ุงูุงุญุชูุงุธ ุจุขุฎุฑ 200 ุฑุณุงูุฉ ููุท
    if (messages.length > 200) {
      messages = messages.slice(-200);
    }
    
    // ุฅุฑุณุงู ููุฌููุน ูู ููุณ ุงูุบุฑูุฉ
    socket.broadcast.to(user.room).emit('new-message', fullMessage);
    
    console.log(`๐ฌ ุฑุณุงูุฉ ุฌุฏูุฏุฉ ูู ${user.userName}: ${message.text || 'ููู'}`);
  });

  // ูุคุดุฑ ุงููุชุงุจุฉ
  socket.on('typing', (data) => {
    const user = users.get(socket.id);
    if (!user) return;
    
    user.typing = true;
    socket.broadcast.to(user.room).emit('user-typing', {
      userName: user.userName,
      userId: socket.id
    });
  });

  socket.on('stop-typing', () => {
    const user = users.get(socket.id);
    if (!user) return;
    
    user.typing = false;
    socket.broadcast.to(user.room).emit('user-stopped-typing', {
      userName: user.userName,
      userId: socket.id
    });
  });

  // ูุณุญ ุงูุฑุณุงุฆู
  socket.on('clear-messages', () => {
    const user = users.get(socket.id);
    if (!user) return;
    
    // ูุณุญ ุฑุณุงุฆู ุงูุบุฑูุฉ ููุท
    messages = messages.filter(msg => msg.room !== user.room);
    
    io.to(user.room).emit('messages-cleared', {
      by: user.userName,
      timestamp: Date.now()
    });
    
    console.log(`๐๏ธ ${user.userName} ูุณุญ ุฑุณุงุฆู ุงูุบุฑูุฉ ${user.room}`);
  });

  // ุฅุฑุณุงู heartbeat
  socket.on('ping', () => {
    socket.emit('pong');
  });

  // ูุทุน ุงูุงุชุตุงู
  socket.on('disconnect', () => {
    const user = users.get(socket.id);
    if (user) {
      // ุฅุดุนุงุฑ ุจุงููุบุงุฏุฑุฉ
      socket.broadcast.to(user.room).emit('user-left', {
        userName: user.userName,
        message: `${user.userName} ุบุงุฏุฑ ุงููุญุงุฏุซุฉ`,
        timestamp: Date.now()
      });
      
      users.delete(socket.id);
      
      // ุชุญุฏูุซ ุนุฏุฏ ุงููุชุตููู
      const roomUsers = Array.from(users.values()).filter(u => u.room === user.room);
      io.to(user.room).emit('users-count', roomUsers.length);
      
      console.log(`๐ ${user.userName} ูุทุน ุงูุงุชุตุงู`);
    }
  });
});

// ูุนุงูุฌุฉ ุงูุฃุฎุทุงุก
process.on('uncaughtException', (err) => {
  console.error('โ ุฎุทุฃ ุบูุฑ ูุชููุน:', err);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('โ Promise ูุฑููุถ:', reason);
});

// ุจุฏุก ุงูุณูุฑูุฑ
server.listen(PORT, () => {
  console.log(`๐ ุณูุฑูุฑ ุงููุญุงุฏุซุฉ ุงูุนุฑุจู ูุนูู ุนูู ุงูุจูุฑุช ${PORT}`);
  console.log(`๐ ุงูุฑุงุจุท: http://localhost:${PORT}`);
  console.log(`๐ฑ ุฌุงูุฒ ูุงุณุชูุจุงู ุงูุงุชุตุงูุงุช!`);
});